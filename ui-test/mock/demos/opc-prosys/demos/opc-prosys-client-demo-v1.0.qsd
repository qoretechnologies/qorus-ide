# -*- mode: qore; indent-tabs-mode: nil -*-

# servicetype: USER
# service: opc-prosys-client-demo
# serviceversion: 1.0
# servicedesc: demonstrates OPC API support with the commercial ProSys SDK
# autostart: true
# parse-options: PO_NEW_STYLE, PO_STRICT_ARGS, PO_REQUIRE_TYPES
# define-group: DEMO: demonstration code
# groups: DEMO
# ENDSERVICE

# name: init
# desc: initializes the service
%enable-all-warnings

%requires jni

%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/Opc.Ua.Stack-1.02.337.12.jar
%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/Prosys-OPC-UA-Java-SDK-Client-Server-Evaluation-2.3.0-764.jar
%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/slf4j-api-1.7.7.jar
%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/httpclient-4.2.5.jar
%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/httpcore-4.2.4.jar
%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/httpcore-nio-4.2.4.jar
%module-cmd(jni) add-classpath $OMQ_DIR/user/jar/commons-logging-1.2.jar

%module-cmd(jni) import java.io.IOException
%module-cmd(jni) import java.net.UnknownHostException
%module-cmd(jni) import java.util.Locale
%module-cmd(jni) import java.util.concurrent.TimeUnit

%module-cmd(jni) import org.opcfoundation.ua.builtintypes.DataValue
%module-cmd(jni) import org.opcfoundation.ua.builtintypes.LocalizedText
%module-cmd(jni) import org.opcfoundation.ua.builtintypes.NodeId
%module-cmd(jni) import org.opcfoundation.ua.core.ApplicationDescription
%module-cmd(jni) import org.opcfoundation.ua.core.ApplicationType
%module-cmd(jni) import org.opcfoundation.ua.core.Identifiers
%module-cmd(jni) import org.opcfoundation.ua.transport.security.SecurityMode
%module-cmd(jni) import org.opcfoundation.ua.core.ReferenceDescription

%module-cmd(jni) import com.prosysopc.ua.ApplicationIdentity
%module-cmd(jni) import com.prosysopc.ua.SecureIdentityException
%module-cmd(jni) import com.prosysopc.ua.client.UaClient
%module-cmd(jni) import com.prosysopc.ua.client.Subscription
%module-cmd(jni) import com.prosysopc.ua.client.SubscriptionNotificationListener
%module-cmd(jni) import com.prosysopc.ua.client.ServerStatusListener
%module-cmd(jni) import com.prosysopc.ua.client.ServerList
%module-cmd(jni) import com.prosysopc.ua.types.opcua.AnalogItemType

hash sub browse_node(NodeId nodeId) {
    UaNode node = client.getAddressSpace().getNode(nodeId);
    hash rv = (
        "name": node.getDisplayName().getText(),
        "type": node instanceof UaInstance
            ? cast<UaInstance>(node).getTypeDefinition().getDisplayName().getText()
            : sprintf("[%s]", node.getNodeClass().toString()),
        "id": nodeId.toString(),
        );

    if (node instanceof AnalogItemType) {
        AnalogItemType analogNode = node;
        *EUInformation units = analogNode.getEngineeringUnits();
        if (units)
            rv.units = units.getDisplayName().getText();

        *Range range = analogNode.getEuRange();
        if (range) {
            rv.range_low = range.getLow();
            rv.range_high = range.getHigh();
        }
    }

    *ArrayList l = client.getAddressSpace().browse(nodeId);
    if (l) {
        for (int i = 0; i < l.size(); ++i) {
            ReferenceDescription r = l.get(i);
            NodeId target = client.getAddressSpace().getNamespaceTable().toNodeId(r.getNodeId());
            rv.children{target.toString()} = browse_node(target);
        }
    }

    return rv;
}

class QorusUaSubscriptionNotificationListener {
    private:internal {
        SubscriptionNotificationListener listener;
    }

    SubscriptionNotificationListener getListener(ClassLoader loader) {
        return listener = cast<SubscriptionNotificationListener>(implement_interface(new QoreInvocationHandler(\event()), Class::forName("com.prosysopc.ua.client.SubscriptionNotificationListener", True, loader)));
    }

    any event(Method method, *list args) {
        log(LL_INFO, "subscription event: %y args: %y", method.toString(), args);
        switch (method.getName()) {
            # allow for calling Object methods
            case "equals": return System::identityHashCode(args[0]) == System::identityHashCode(listener);
            case "hashCode": return System::identityHashCode(listener);
            case "toString": return listener.getClass().getName() + "@" + Integer::toHexString(System::identityHashCode(listener));
        }
    }
}

class QorusUaClient inherits UaClient {
    public {
    }

    private:internal {
        ServerStatusListener ssl;
    }

    constructor(string url) : UaClient(url) {
        setSecurityMode(SecurityMode::NONE);

        ApplicationDescription appDescription();
        appDescription.setApplicationName(new LocalizedText("QorusOpcClient", Locale::ENGLISH));
        appDescription.setApplicationUri("urn:localhost:UA:QorusOpcClient");
        appDescription.setProductUri("urn:prosysopc.com:UA:QorusOpcClient");
        appDescription.setApplicationType(ApplicationType::Client);

        ApplicationIdentity identity();
        identity.setApplicationDescription(appDescription);
        setApplicationIdentity(identity);

        setLocale(Locale::ENGLISH);

        setTimeout(30, TimeUnit::SECONDS);

        # StatusCheckTimeout is used to detect communication problems and start automatic reconnection.
        setStatusCheckTimeout(10, TimeUnit::SECONDS);

        ClassLoader loader = getClass().getClassLoader();

        ssl = cast<ServerStatusListener>(implement_interface(loader, new QoreInvocationHandler(\serverStatusEvent()), Class::forName("com.prosysopc.ua.client.ServerStatusListener", True, loader)));
        addServerStatusListener(ssl);

        getAddressSpace().setMaxReferencesPerNode(1000);
    }

    destructor() {
        disconnect();
    }

    private:internal any serverStatusEvent(Method method, *list args) {
        #log(LL_DEBUG_3, "server status event: %y args: %y", method.getName(), (map $1.toString(), args));
        switch (method.getName()) {
            # ignore status change messages
            case "onStatusChange": return;
            case "onStateChange": log(LL_INFO, "SERVER STATE CHANGE: %y -> %y", args[1].toString(), args[2].toString()); break;
            # allow for calling Object methods
            case "equals": return System::identityHashCode(args[0]) == System::identityHashCode(ssl);
            case "hashCode": return System::identityHashCode(ssl);
            case "toString": return ssl.getClass().getName() + "@" + Integer::toHexString(System::identityHashCode(ssl));
        }
        #return method.invoke(self, args);
    }
}

const UaUri = "opc.tcp://localhost:52520/OPCUA/SampleConsoleServer";

sub init() {
    our QorusUaClient client(UaUri);

    our Subscription subscr();
    QorusUaSubscriptionNotificationListener l0();
    subscr.addNotificationListener(l0.getListener(client.getClass().getClassLoader()));
    client.addSubscription(subscr);

    client.connect();
}
# END

# desc: read the server's state
hash sub read() {
    hash rv;
    DataValue value = client.readValue(Identifiers::Server_ServerStatus_State);
    rv.state = value.getValue().toString();
    value = client.readValue(Identifiers::Server_ServerStatus_BuildInfo_ProductName);
    rv.product = value.getValue().toString();
    log(LL_INFO, "value: %y", rv);
    return rv;
}
# END

# desc: write a value to the server
hash sub write() {
    hash rv;
    DataValue value = client.readValue(Identifiers::Server_ServerStatus_State);
    rv.state = value.getValue().toString();
    value = client.readValue(Identifiers::Server_ServerStatus_BuildInfo_ProductName);
    rv.product = value.getValue().toString();
    log(LL_INFO, "value: %y", rv);
    return rv;
}
# END

# desc: performs discovery on the server
list sub discover() {
    ServerList list(UaUri);
    log(LL_INFO, "discovery: servers found: %d", list.size());

    list rv;
    foreach ApplicationDescription app in (list.getServers()) {
        hash sh = (
            "uri": UaUri,
            "name": app.getApplicationName().getText(),
            "type": app.getApplicationType().toString(),
            "product": app.getProductUri(),
            "application": app.getApplicationUri(),
            );

        sh.endpoints = ();
        foreach string uri in (app.getDiscoveryUrls()) {
            UaClient client(uri);

            map sh.endpoints += (
                "uri": uri,
                "security": $1.getSecurityMode().toString(),
                "policy_uri": $1.getSecurityPolicyUri().regexExtract("#(.*)")[0],
                "transport": $1.getTransportProfileUri().regexExtract("Transport/(.*)")[0],
                ), client.discoverEndpoints();
        }

        rv += sh;
    }

    log(LL_DETAIL_2, "discovery: %N", rv);
    return rv;
}
# END

# desc: browses the server
hash sub browse() {
    hash rv;

    client.getAddressSpace().setMaxReferencesPerNode(1000);

    NodeId nodeid = Identifiers::RootFolder;

    rv = browse_node(nodeid);

    # too much info is returned here too log
    #log(LL_DETAIL_2, "browse: %N", rv);
    return rv;
}
# END
