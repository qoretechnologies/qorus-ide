%new-style
%require-types
%strict-args
%enable-all-warnings

const PropNameDisableErrors = "disable-errors";

class Demo inherits QorusNormalStep {
    primary() {
        hash<auto> sh = getStepInfo();

        # 1/20 chance of a delay once in the order
        if (!(rand() % 20) && !getDynamicData("delay-done")) {
            logInfo("delaying execution for 1 second");
            updateDynamicData({"delay-done": True});
            omqsleep(1);
        }

        if (getDynamicData("disable-errors")) {
            logInfo("static data value %y set (step %s v%s (%d))",
                PropNameDisableErrors, sh.name, sh.version, sh.stepid);
            return;
        }

        if (getStaticData("disable-errors")) {
            logInfo("dynamic data value %y set (step %s v%s (%d))",
                PropNameDisableErrors, sh.name, sh.version, sh.stepid);
            return;
        }

        if (propGet("demo", PropNameDisableErrors)) {
            logInfo("system property %y set in the \"demo\" domain (step %s v%s (%d))",
                PropNameDisableErrors, sh.name, sh.version, sh.stepid);
            return;
        }

        # 1/10 chance of a retry error if errors are not disabled
        if (!(rand() % 10)) {
            logInfo("raising a random technical error for step %s v%s (%d)",
                sh.name, sh.version, sh.stepid);
            stepError("RETRY-ERROR", "random technical error", 2);
            return;
        }

        logInfo("no errors for step %s v%s (%d)", sh.name, sh.version, sh.stepid);
    }

    string validation() {
        hash<auto> sh = getStepInfo();
        logInfo("recovered step %s v%s (%d) automatically", sh.name, sh.version, sh.stepid);
        return OMQ::StatComplete;
    }
}
# END
