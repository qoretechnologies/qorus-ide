# -*- mode: qore; indent-tabs-mode: nil -*-
# generated by swagger2service on 2019-06-07 from Swagger schema ./billing-demo-1.0.yaml

# service: TelcoBillingDemo
# class-based: true
# serviceversion: 1.0.0
# parse-options: PO_NEW_STYLE, PO_REQUIRE_TYPES, PO_STRICT_ARGS
# serviceauthor: David Nichols
# servicedesc: This is a demo API for creating a billing account
# resource: billing-demo-1.0.yaml
# autostart: true
# ENDSERVICE

# import the Swagger module for Swagger 2.0 REST schema validation
%requires Swagger

%new-style
%require-types
%strict-args
%enable-all-warnings

# REST API hash<auto> "response_200"
hashdecl response_200 {
    int Id;
}

# REST API hash<auto> "Account"
hashdecl Account {
    int Id;
    string Name;
    string Type;
    string TaxId;
    string RequestId;
    hash<PaymentInfo> PaymentInfo;
    string BillCycle;
}

# REST API hash<auto> "PaymentInfo"
hashdecl PaymentInfo {
    string Type;
    string Id;
    string Expiration;
    string CVV2;
    string Name;
    string Address;
}

# REST class for URI path /accounts/{accountId}: methods: GET, PUT, DELETE
class AccountsAccountIdRestClass inherits AbstractRestClass {
    private {
        string arg;
    }

    constructor(string arg) {
        self.arg = arg;
    }

    string name() {
        return arg;
    }

    # GET /accounts/{accountId}
    hash<auto> get(hash<auto> cx, *hash<auto> ah) {
        # NOTE: insert custom method code here
        hash<Account> body({
            "Id": arg.toInt(),
            "Name": "value",
            "Type": "value",
            "TaxId": "value",
            "RequestId": "value",
            "PaymentInfo": new hash<PaymentInfo>({
                "Type": "value",
                "Id": "value",
                "Expiration": "value",
                "CVV2": "value",
                "Name": "value",
                "Address": "value",
            }),
            "BillCycle": "value",
        });
        return RestHandler::makeResponse(200, body);
    }

    # PUT /accounts/{accountId}
    hash<auto> put(hash<auto> cx, *hash<auto> ah) {
        # NOTE: insert custom method code here
        return RestHandler::makeResponse(200);
    }

    # DELETE /accounts/{accountId}
    hash<auto> delete(hash<auto> cx, *hash<auto> ah) {
        # NOTE: insert custom method code here
        return RestHandler::makeResponse(200);
    }
}

# REST class for URI path /accounts: methods: POST
class AccountsRestClass inherits AbstractRestClass {
    string name() {
        return "accounts";
    }

    *AbstractRestClass subClass(string arg, hash<auto> cx, *hash<auto> ah) {
        # FIXME: implement appropriate wildcard matching logic here for arg =~ /{accountId}/
        return new AccountsAccountIdRestClass(arg);
    }

    # GET /accounts
    hash<auto> get(hash<auto> cx, *hash<auto> ah) {
        if (ServiceApi::getConfigItemValue("set-error")) {
            UserApi::logInfo("returning an error due to the \"set-error\" flag");
            return RestHandler::makeResponse(404, sprintf("RequestId %y not found", ah.RequestId));
        }
        # NOTE: insert custom method code here
        hash<Account> body({
            "Id": rand() % 10000000,
            "Name": "value",
            "Type": "value",
            "TaxId": "value",
            "RequestId": string(ah.RequestId),
            "PaymentInfo": new hash<PaymentInfo>({
                "Type": "value",
                "Id": "value",
                "Expiration": "value",
                "CVV2": "value",
                "Name": "value",
                "Address": "value",
            }),
            "BillCycle": "value",
        });
        return RestHandler::makeResponse(200, body);
    }

    # POST /accounts
    hash<auto> post(hash<auto> cx, *hash<auto> ah) {
        if (ServiceApi::getConfigItemValue("set-error")) {
            UserApi::logInfo("returning an error due to the \"set-error\" flag");
            return RestHandler::makeResponse(500, "temporary system error");
        }
        # NOTE: insert custom method code here
        hash<response_200> body({
            "Id": rand() % 10000000,
        });
        ServiceApi::logInfo("req: %y resp: %y", ah, body);
        return RestHandler::makeResponse(200, body);
    }
}

class BillingAPIDemoRestHandler inherits BBM_RestHandlerBase {
    constructor() : BBM_RestHandlerBase() {
        addClass(new AccountsRestClass());
    }

    # remove the path prefix from requests before matching
    removeRootPath(reference<string> path) {
        path =~ s/^\/*billing-demo//;
    }
}

class TelcoBillingDemo inherits BBM_RestServiceBase {
    private AbstractServiceHttpHandler getHandlerImpl() {
        return new BillingAPIDemoRestHandler();
    }

    # name: activateCustomer
    # desc: create demo activate customer order
    int activateCustomer() {
        hash<auto> order = {
            "staticdata": {
                "pos-code": 1238593,
                "customer": {
                    "data": "@party-1",
                    "customer-category": "SOHO",
                    "accounts": {
                        "type": "BUSINESS",
                        "payment-info": "@payment-1",
                        "account-password": "@party-1",
                        "account-pin": "@party-1",
                        "payment-terms": "NET30",
                        "bill-cycle": "BUSINESS-30-15",
                        "services": {
                            "type": "MOBILE-CONVERGENT",
                            "tariff": "Premium Business+",
                            "options": (
                                "DATA+",
                                "SMS+",
                                "MMS+",
                                "VPN",
                            ),
                            "network-profile": "FAST",
                            "roaming-profile": "STD-INTL0",
                            "msisdn": "@msisdn-1",
                            "iccid": "@iccid-1",
                            "activation-date": 2019-04-01T11:28:43,
                            "service-level": "BUSINESS-STANDARD+",
                        },
                    },
                },
            },
            "sensitive_data": {
                "tax-number": {
                    "A793873.234": {
                        "data": {
                            "business_name": NOTHING,
                            "given_names": "John",
                            "family_name": "Customer",
                            "street_address": "10 Orange Street",
                            "city": "London",
                            "postal_code": "WC2N 5DU",
                            "country": "UK",
                            "email": "john@customer.com",
                            "home-tel": "0149391234",
                            "contact-preference": "email",
                            "party-password": "example-password",
                            "party-pin": "0123",
                            "credit-checked": True,
                            "credit-score": 850,
                        },
                        "aliases": "party-1",
                    },
                },
                "credit-card-info": {
                    "1234-5678-9999-9999": {
                        "data": {
                            "type": "credit-card",
                            "card-type": "VISA",
                            "card-expiration-date": "12-25",
                            "CVV2": "000",
                            "name": "John Customer",
                            "billing-address": "10 Orange Street, London WC2N 5DU",
                            "contact-tel": "0149391234",
                            "contact-email": "john@customer.com",
                        },
                        "aliases": "payment-1",
                    },
                },
                "msisdn": {
                    "9012345677": {
                        "data": {
                            "type": "STD",
                            "provisioning-status": "PREPROVISIONED",
                        },
                        "aliases": "msisdn-1",
                    },
                },
                "iccid": {
                    "131432423404094": {
                        "data": {
                            "type": "STD",
                            "provisioning-status": "PREPROVISIONED",
                        },
                        "aliases": "iccid-1",
                    },
                },
            },
        };
        return createOrder("TELCO-ACTIVATE-CUSTOMER", NOTHING, order);
    }
}
