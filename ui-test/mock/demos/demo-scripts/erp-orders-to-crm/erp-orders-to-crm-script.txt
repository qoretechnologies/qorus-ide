job:
    name:
        erp-orders-to-crm
    desc:
        Synchronize new orders in **Salesforce** from the ERP system

    classes:
        BBM_DataProviderRequest
        BBM_InternalIterator
        BBM_CreateOrder
        BBM_OutputData

    config:
        dataprovider-request-provider-path = connection/zeyosrests-iot-demo/api/v1/transactions/POST

        dataprovider-request-input =
            body: {
                filters: {
                    type: 6,
                    creationdate: {
                        '>': '$qore-expr:{get_epoch_seconds($pstate:last_executed??{2000-01-01})}'
                    }
                }
            }

        internal-iterator-key-path = body

        create-workflow-name = ERP-ORDERS-TO-CRM

        output-data-hash = '$info:last_executed': '$pstate:last_executed'

    mapper:
        name:
            erp-orders-to-crm-job-mapper
        desc:
            Creates workflow orders for new orders in the ERP system
        input:
            connection/zeyosrests-iot-demo/api/v1/transactions/GET/response
        mappings:
            dynamicdata
                context: $qore-expr:{{'items': parse_json($qore-expr-value:{$local:input.body.items})}}
            staticdata ⬅︎ input
            workflow_unique_key
                + transactionnum ⬅︎ transactionnum
                    desc: Unique ERP order number
                    type: softstring

workflow:
    name:
        ERP-ORDERS-TO-CRM
    desc:
        Synchronize new orders in **Salesforce** from the ERP system
    autostart:
        1
    key list:
        transactionnum
    static data type:
        connection -> zeyosrests-iot-demo -> api -> v1 -> transactions -> GET -> response

    step:
        name:
            ErpOrdersToCrmStep
        desc:
            Synchronize new orders in **Salesforce** from the ERP system
        base class:
            QorusNormalStep
        classes:
            BBM_GenericMapper
        config:
            automapper-mapper-name = erp-orders-to-crm-wf-mapper
            automapper-input = {}
            automapper-output = '$local:id': '$dynamic:id'
        mappers:
            erp-orders-to-crm-wf-mapper

    mapper:
        name:
            erp-orders-to-crm-wf-mapper
        desc:
            Synchronize new orders in **Salesforce** from the ERP system
        context:
            workflow -> ERP-ORDERS-TO-CRM
        options:
            output_create_ignore_duplicates: true
        input:
            type -> qore -> hash
        output:
            connection -> sfrests-demo -> Order
        mappings:
            AccountId:
                ⬅︎ static.body.shippingrecipient
            EffectiveDate:
                context: $qore-expr:{localtime($static:body.creationdate)}
            Markup__c:
                ⬅︎ static:body.margin
            OwnerId:
                constant: 0052o0000095F5uAAE
            Pricebook2Id:
                constant: 01s2o000001QswCAAS
            Status:
                constant: Draft
            UnitCost__c:
                ⬅︎ static:body.netamount
            erp_order_id_c:
                ⬅︎ static.body.transactionnum

    step:
        name:
            ErpOrderItemsToCrmStep
        desc:
            Synchronize new items in CRM from the ERP system
        base class:
            QorusNormalArrayStep
        classes:
            BBM_GetArray (trigger: array)
            BBM_GetData (trigger: primary)
            ⬅︎ BBM_GenericMapper
        config:
            get-array-output = $dynamic:items
            get-data = $info:step.array_element
            automapper-mapper-name = erp-items-to-crm-wf-mapper
        mappers:
            erp-items-to-crm-wf-mapper
        value maps:
            erp-crm-item-map

    mapper:
        name:
            erp-items-to-crm-wf-mapper
        desc:
            Add items from the ERP system to orders in **Salesforce**
        options:
            output_create_ignore_duplicates: true
        input:
            type -> zeyos -> order -> item
        output:
            connection -> sfrests-demo -> OrderItem
        mappings:
            OrderId:
                context: $dynamic:id
            PricebookEntryId:
                value_lookup: erp-crm-item-map.$local:input.itemnum
            Quantity:
                ⬅︎ amount
            UnitPrice:
                ⬅︎ sellingprice

