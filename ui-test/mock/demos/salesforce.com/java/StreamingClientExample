#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires jni

# we do the login and get a session ID with the SalesforceRestClient class
%requires SalesforceRestClient

%module-cmd(jni) import org.cometd.bayeux.Channel
%module-cmd(jni) import org.cometd.bayeux.Message
%module-cmd(jni) import org.cometd.bayeux.client.ClientSessionChannel
%module-cmd(jni) import org.cometd.client.BayeuxClient
%module-cmd(jni) import org.cometd.client.transport.ClientTransport
%module-cmd(jni) import org.cometd.client.transport.LongPollingTransport

%module-cmd(jni) import org.eclipse.jetty.client.ContentExchange
%module-cmd(jni) import org.eclipse.jetty.client.HttpClient

%module-cmd(jni) import java.net.MalformedURLException
%module-cmd(jni) import java.net.URL
%module-cmd(jni) import java.util.HashMap
%module-cmd(jni) import java.util.Map

%module-cmd(jni) import SalesforceLongPollingTransport

%exec-class StreamingClientExample

/**
 * This example demonstrates how a streaming client works
 * against the Salesforce Streaming API.
 **/
class StreamingClientExample {
    public {
    }

    private {
        const Opts = (
            "client_id":      "i,client_id=s",
            "client_secret":  "s,client_secret=s",
            "user":           "u,username=s",
            "pass":           "p,password=s",
            );

        # The channel to subscribe to. Same as the name of the PushTopic.
        # Be sure to create this topic before running this sample.
        const Channel = "/topic/AccountUpdates";
        const StreamingEndpointUriPath = "cometd/38.0";

        # The long poll duration.
        const ConnectionTimeout = 20 * 1000;  # milliseconds
        const ReadTimeout = 120 * 1000; # milliseconds
    }

    constructor() {
        GetOpt g(Opts);
        hash opt = g.parse3(\ARGV);

        BayeuxClient client = makeClient(opt);

        printf("Running streaming client example....\n");

        # get MessageListener interface class
        Class ml = load_class("org/cometd/bayeux/client/ClientSessionChannel$MessageListener");

        # debug event callback
        code get_dbg_callback = code sub (string event) {
            return sub (Method method, *list args) {
                #ClientSessionChannel channel = args[0];
                Message message = args[1];
                printf("%s: %s\n", event, message.toString());

                bool success = message.isSuccessful();
                if (!success) {
                    string error = message.get("error");
                    if (error) {
                        printf("Error during event: %y\n", event, error);
                        printf("Exiting...\n");
                        exit(1);
                    }

                    *Exception exception = message.get("exception");
                    if (exception) {
                        printf("Exception during HANDSHAKE:\n");
                        exception.printStackTrace();
                        printf("Exiting...\n");
                        exit(1);
                    }
                }
            };
        };

        # get handshake events
        client.getChannel(org::cometd::bayeux::Channel::META_HANDSHAKE).addListener(cast<ClientSessionChannel__MessageListener>(implement_interface(new QoreInvocationHandler(get_dbg_callback("HANDSHAKE")), ml)));

        # get connect events
        client.getChannel(org::cometd::bayeux::Channel::META_CONNECT).addListener(cast<ClientSessionChannel__MessageListener>(implement_interface(new QoreInvocationHandler(get_dbg_callback("CONNECT")), ml)));

        # get subscription events
        client.getChannel(org::cometd::bayeux::Channel::META_SUBSCRIBE).addListener(cast<ClientSessionChannel__MessageListener>(implement_interface(new QoreInvocationHandler(get_dbg_callback("SUBSCRIBE")), ml)));

        client.handshake();
        System::out.println("Waiting for handshake");

        bool handshaken = client.waitFor(10 * 1000, BayeuxClient__State::CONNECTED);
        if (!handshaken) {
            printf("handshake timeout\n");
            exit(1);
        }

        printf("Subscribing to channel: %y\n", Channel);

        # get events
        client.getChannel(Channel).subscribe(cast<ClientSessionChannel__MessageListener>(implement_interface(new QoreInvocationHandler(\messageCallback()), ml)));

        printf("Waiting for streamed data from your organization ...\n");
        sleep(120);

        client.disconnect();
    }

    messageCallback(Method method, *list args) {
        if (method.getName() != "onMessage")
            return;

        #ClientSessionChannel channel = args[0];
        Message message = args[1];
        printf("Message: %y\n", message.toString());
    }

    static error(string fmt) {
        stderr.printf("%s: ERROR: %s\n", get_script_name(), vsprintf(fmt, argv));
        exit(1);
    }

    private static BayeuxClient makeClient(hash opt) {
        hash sfopt;
        sfopt.client_id = opt.client_id ?? ENV.SALESFORCE_CONSUMER_KEY;
        if (!sfopt.client_id)
            StreamingClientExample::error("missing --client_id option or SALESFORCE_CONSUMER_KEY environment variable");
        sfopt.client_secret = opt.client_secret ?? ENV.SALESFORCE_CONSUMER_SECRET;
        if (!sfopt.client_secret)
            StreamingClientExample::error("missing --client_secret option or SALESFORCE_CONSUMER_SECRET environment variable");
        sfopt.username = opt.user ?? ENV.SALESFORCE_USER;
        if (!sfopt.username)
            StreamingClientExample::error("missing --username option or SALESFORCE_CONSUMER_USER environment variable");
        sfopt.password = opt.pass ?? ENV.SALESFORCE_PASS;
        if (!sfopt.password)
            StreamingClientExample::error("missing --password option or SALESFORCE_CONSUMER_PASS environment variable");

        printf("connecting: ");

        # login and get session ID
        SalesforceRestClient src(sfopt);
        src.login();

        # get Salesforce.com session ID
        string sessionid = src.getToken();

        # get Salesforce.com endpoint URL
        string endpoint = src.getURL();

        printf("connected to %y\n", endpoint);

        HttpClient httpClient();
        httpClient.setConnectTimeout(ConnectionTimeout);
        httpClient.setTimeout(ReadTimeout);
        httpClient.start();

        /*
        @Override
            protected void customize(ContentExchange exchange) {
        super.customize(exchange);
        exchange.addRequestHeader("Authorization", "OAuth " + sessionid);
        }
        };
        */

        HashMap options();
        options.put(ClientTransport::TIMEOUT_OPTION, ReadTimeout);
        SalesforceLongPollingTransport transport(options, httpClient, sessionid);

        string streaming_url = endpoint;
        streaming_url =~ s/services\/data\/.*$//;
        streaming_url += StreamingEndpointUriPath;
        printf("connecting to streaming URL %y\n", streaming_url);
        return new BayeuxClient(streaming_url, transport);
    }
}
