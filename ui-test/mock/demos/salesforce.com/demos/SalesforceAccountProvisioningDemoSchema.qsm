# -*- mode: qore; indent-tabs-mode: nil -*-
# @file SalesforceAccountProvisioningDemoSchema.qsm Qorus Integration System Salesforce.com account provisioning demo user schema module

/*  SalesforceAccountProvisioningDemoSchema.qsm Copyright 2016 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%requires qore >= 0.8.12

module SalesforceAccountProvisioningDemoSchema {
    version = "1.0";
    desc = "Qorus Salesforce.com account provisioning demo user schema module";
    author = "Qore Technologies <info@qoretechnologies.com>";
    url = "http://www.qoretechnologies.com";
}

# here we add fallback paths to the QORE_MODULE_DIR search path,
# in case QORE_MODULE_DIR is not set properly for Qorus
%append-module-path /var/opt/qorus/qlib:$OMQ_DIR/qlib:/opt/qorus/qlib

%requires Schema
%requires SqlUtil

%new-style
%strict-args
%require-types
%strict-args
%enable-all-warnings

# private namespace for private schema declarations
namespace Private {
    const GenericOptions = (
        "replace": True,
        );

    const IndexOptions = (
        "driver": (
            "oracle": (
                "compute_statistics": True,
            ),
        ),
        );

    const ColumnOptions = (
        "driver": (
            "oracle": ("character_semantics": True,),
        ),
        );

	# select id, name, description, accountnumber, BillingStreet, BillingState, BillingPostalCode, BillingCountry, BillingCity from account
    const T_SalesforceAccounts = (
        "columns": (
            "id": c_varchar(20, True, "PK ID field"),
            "name": c_varchar(64, True, "account name"),
            "descr": c_varchar(256, False, "account description"),
            "acc_no": c_varchar(24, True, "account number"),
            "bill_street": c_varchar(64, True, "billing street"),
            "bill_city": c_varchar(64, True, "billing city"),
            "bill_state": c_varchar(64, False, "billing state"),
            "bill_pcode": c_varchar(10, True, "billing postal code / zip"),
            "bill_country": c_varchar(64, True, "billing country"),
            "uuid": c_varchar(40, True, "UUID for the account"),
            "qorus_wfiid": c_int(True),
        ),
        "primary_key": ("name": "pk_salesforce_accounts", "columns": ("id")),
        "indexes": (
            "sk_salesforce_accounts_name": ("columns": ("name")),
            "sk_salesforce_accounts_uuid": ("columns": ("uuid")),
            "sk_salesforce_accounts_q_wfiid": ("columns": ("qorus_wfiid")),
        ),
        );

    const Tables = (
        "salesforce_accounts": T_SalesforceAccounts,
        );

    const Sequences = (
        "seq_salesforce_accounts": hash(),
        );
}

public namespace SalesforceAccountProvisioningDemoSchema {
    public string sub get_datasource_name() {
        return "omquser";
    }

    public SalesforceAccountProvisioningDemoSchema sub get_user_schema(AbstractDatasource ds, *string dts, *string its) {
        return new SalesforceAccountProvisioningDemoSchema(ds, dts, its);
    }

    public class SalesforceAccountProvisioningDemoSchema inherits AbstractSchema {
        public {
            const SchemaName = "SalesforceAccountProvisioningDemoSchema";
            const SchemaVersion = "1.0";
        }

        constructor(AbstractDatasource ds, *string dts, *string its) :  AbstractSchema(ds, dts, its) {
        }

        private string getNameImpl() {
            return SchemaName;
        }

        private string getVersionImpl() {
            return SchemaVersion;
        }

        private *hash getTablesImpl() {
            return Tables;
        }

        private *hash getSequencesImpl() {
            return Sequences;
        }

        private *hash getIndexOptionsImpl() {
            return IndexOptions;
        }

        private *hash getGenericOptionsImpl() {
            return GenericOptions;
        }

        private *hash getColumnOptionsImpl() {
            return ColumnOptions;
        }
    }
}
