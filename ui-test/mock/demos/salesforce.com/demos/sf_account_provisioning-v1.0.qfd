# -*- mode: qore; indent-tabs-mode: nil -*-

# type: GENERIC
# version: 1.0
# desc: Salesforce.com account provisioning demo onetimeinit function
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

%requires SalesforceSoapClient

sub sf_acc_prov_init() {
    # ensure we can get our Salesforce.com SOAP connection
    get_user_connection("sfsoap-demo");

    # ensure we can get our supplier SOAP connection
    get_user_connection("soap-supplier-demo");

    # ensure we can get our gmail SMTP connection
    get_user_connection("smtps-demo");
}
# END

# type: GENERIC
# version: 1.0
# desc: Salesforce.com REST account provisioning demo onetimeinit function
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

%requires SalesforceRestClient

sub sf_rest_acc_prov_init() {
    # ensure we can get our Salesforce.com REST connection
    get_user_connection("sfrests-demo");

    # ensure we can get our supplier SOAP connection
    get_user_connection("soap-supplier-demo");

    # ensure we can get our gmail SMTP connection
    get_user_connection("smtps-demo");
}
# END

# type: STEP
# version: 1.0
# desc: Salesforce.com account provisioning demo get Salesforce.com accounts step function
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

sub sf_acc_prov_get_accounts() {
    # get salesforce.com SOAP connection
    SalesforceSoapClient sc = get_user_connection("sfsoap-demo");

    list accounts = ();

    # get static data for accounts to retrieve
    int wfiid = wf_wfiid();

    # create SOQL query string
    string ss = "select id, name, description, accountnumber, BillingStreet, BillingState, BillingPostalCode, BillingCountry, BillingCity from account where site = 'acc_prov_demo'";

    # execute query in Salesforce.com
    list results = sc.query(("queryString": ss)).result.records;

    # get account numbers
    list accNumbers = wf_get_static_data().account_numbers;
    hash accNoHash = map {$1: True}, accNumbers;

    # filter out old results
    list accData = select results, accNoHash{$1.AccountNumber};

    # prepare dynamic data
    map accounts += {"details": remove_nulls($1), "uuid": UUID::get(), "wfiid": wfiid}, accData;

    # save accounts in dynamic data
    hash dd = (
        "accounts": accounts,
        );
    wf_update_dynamic_data(dd);
}
# END

# type: STEP
# version: 1.0
# desc: Salesforce.com REST account provisioning demo get Salesforce.com accounts step function
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

sub sf_rest_acc_prov_get_accounts() {
    # get salesforce.com SOAP connection
    SalesforceRestClient src = get_user_connection("sfrests-demo");

    list accounts = ();

    # get static data for accounts to retrieve
    int wfiid = wf_wfiid();

    # create SOQL query string (URL will be encoded in the SalesforceRestClient object)
    string soql = "/query/?q=select id, name, description, accountnumber, BillingStreet, BillingState, BillingPostalCode, BillingCountry, BillingCity from account where site = 'acc_prov_demo'";

    # execute query in Salesforce.com
    hash results = src.get(soql);
    if (results.status_code != 200 || !results.body.records) {
        log(LL_IMPORTANT, "Salesforce REST query failed:\n%N", results);
        throw "SF-REST-QUERY-ERROR";
    }

    # get account numbers
    list accNumbers = wf_get_static_data().account_numbers;
    hash accNoHash = map {$1: True}, accNumbers;

    # filter out old results
    list accData = select results.body.records, accNoHash{$1.AccountNumber};

    # prepare dynamic data
    map accounts += {"details": remove_nulls($1), "uuid": UUID::get(), "wfiid": wfiid}, accData;

    # save accounts in dynamic data
    hash dd = (
        "accounts": accounts,
        );
    wf_update_dynamic_data(dd);
}
# END

# type: VALIDATION
# name: sf_acc_prov_transform_save_data_val
# version: 1.0
# desc: validation function
# author: Qore Technologies, s.r.o.
%require-types
%new-style
%enable-all-warnings

string sub sf_acc_prov_transform_save_data_val() {
    AbstractTable table = get_sql_table("omquser", "salesforce_accounts");

    softint wfiid = wf_get_workflow_instance_data("workflow_instanceid");
    string status = (table.findSingle(("qorus_wfiid": wfiid)) ? OMQ::StatComplete : OMQ::StatRetry);

    log(LL_INFO, "checking table [salesforce_accounts] for qorus wfiid %d results in: %s", wfiid, status);

    return status;
}
# END

# type: STEP
# version: 1.0
# desc: Salesforce.com account provisioning demo transform Salesforce.com accounts data using mapper and save them step function
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

sub sf_acc_prov_transform_save_data() {
    # get account data
    hash dd = wf_get_dynamic_data();

    # get mapper for the staging DB
    InboundTableMapper st_mapper = get_mapper("salesforce-acc-prov-staging");
    on_success {
        st_mapper.flush();
        st_mapper.commit(); # needs to be called once on any of the available DB objects
    }
    on_error {
        st_mapper.discard();
        st_mapper.rollback();
    }

    # save data to Staging DB
    foreach hash acc in (dd.accounts) {
        st_mapper.queueData(acc);
    }
}
# END

# type: STEP
# version: 1.0
# desc: Salesforce.com account provisioning demo ERP request step function
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

%requires SoapClient

sub sf_acc_prov_erp_request() {
    SoapClient sc = get_user_connection("soap-supplier-demo");

    # get account data
    hash dd = wf_get_dynamic_data();

    # create supplier list
    list l = map (
        "account_name": $1.details.Name,
        "description": $1.details.Description,
        "external_id": $1.details.Id,
        "account_number": $1.details.AccountNumber,
        "address": (
            "street": $1.details.BillingStreet,
            "city": $1.details.BillingCity,
            "postal_code": $1.details.BillingPostalCode,
            #"state": $1.details.BillingState,
            "country": $1.details.BillingCountry,
        ),
        ), dd.accounts;

    log(LL_INFO, "creating supplier in ERP system");
    hash rh = sc.createSupplier(("Suppliers": ("Supplier": l)));
    log(LL_INFO, "done: %y", rh);
}
# END

# type: STEP
# version: 1.0
# desc: Salesforce.com account provisioning demo send email attachment with Salesforce.com account info
# author: Qore Technologies, s.r.o.
%new-style
%strict-args
%require-types
%enable-all-warnings

%requires SmtpClient
%requires MailMessage
%requires Mime

# overridable properties
const Props = (
    "email-to": "ondrej.musil@qoretechnologies.com",
    "email-from": "qoretechnologies.demo@gmail.com",
    "email-subject": "Salesforce.com Account Info",
    );

sub sf_acc_prov_send_email() {
    # get account data
    hash dd = wf_get_dynamic_data();

    # get mapper to transform data to XML format
    Mapper mapper = get_mapper("salesforce-acc-prov-xml");

    # transform data
    dd.accounts = map ("details": mapper.mapData($1.details), "uuid": $1.uuid), dd.accounts;
    log(LL_DETAIL_1, "accounts: %N", dd.accounts);

    # get workflow name for property search
    string name = wf_get_workflow_metadata().name;

    # set email properties
    hash props = map {$1.key: prop_get(name, $1.key) ?? $1.value}, Props.pairIterator();

    # get current timestamp as a string
    string now = Qore::now().format("YYYY-MM-DD HH:mm:SS");

    # create email subject
    string subject = sprintf("%s %s %d", props."email-subject", now, wf_wfiid());

    # create message
    Message msg(props."email-from", subject);

    # set target address
    msg.addTO(props."email-to");

    # get system info
    hash sh = get_system_info();

    # create and set email body
    string body = sprintf("Salesforce.com account info received at %s Qorus %y v%s sessionid %d workflow_instanceid %d\n\n", now, sh."instance-key", sh."omq-version", sh.sessionid, wf_wfiid());
    msg.setBody(body);

    string xml = make_xml(("account": dd.accounts), XGF_ADD_FORMATTING);
    log(LL_DETAIL_1, "XML: %s", xml);

    string fn = "new_accounts.xml";

    # add XML file attachment
    msg.attach(fn, get_mime_type_from_ext(fn), xml);

    # get SMTP connection object
    SmtpClient smtp = get_user_connection("smtps-demo");

    # send the message
    log(LL_INFO, "sending message to %y with attachment %y (%d bytes) containing info about %d accounts", props."email-to", fn, xml.size(), dd.accounts.size());
    smtp.sendMessage(msg);
}
# END
