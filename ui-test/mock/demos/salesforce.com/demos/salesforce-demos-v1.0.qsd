# -*- mode: qore; indent-tabs-mode: nil -*-

# servicetype: USER
# service: salesforce-demos
# serviceversion: 1.0
# servicedesc: kicks off the Salesforce.com demos
# autostart: true
# parse-options: PO_NEW_STYLE, PO_STRICT_ARGS, PO_REQUIRE_TYPES
# define-group: DEMO: demonstration code
# groups: DEMO
# ENDSERVICE

# name: init
# desc: initializes the service
%requires SalesforceSoapClient
%requires SalesforceRestClient
%requires json

const Workflows = (
    "email": "SALESFORCE-EMAIL",
    "soap_acc_prov": "SALESFORCE-ACCOUNT-PROVISIONING",
    "rest_acc_prov": "SALESFORCE-REST-ACCOUNT-PROVISIONING",
    );

sub init() {
}
# END

# name: start_email_demo
# desc: start the salesforce.com -> email demo
const AccountNo = "12345";

int sub start_email_demo() {
    # create static order data for workflow order
    hash sd = (
        "account_number": AccountNo,
        );

    # make order hash
    hash oh = (
        "staticdata": sd,
        );
    softint wfiid = create_order(Workflows.email, NOTHING, oh);
    log(LL_INFO, "created %s wfiid %d", Workflows.email, wfiid);
    return wfiid;
}
# END

# desc: start the salesforce.com SOAP API account provisioning demo
int sub start_soap_acc_prov_demo() {
    # get salesforce.com SOAP connection
    SalesforceSoapClient sc = get_user_connection("sfsoap-demo");

    # generate random account details
    list accounts = gen_acc_details(30);
    list accNumbers = map $1.AccountNumber, accounts;

    # create accounts
    hash rh = sc.create(("sObjects": sc.getType("Account", accounts)));
    if (!rh.result.success) {
        if (rh.result.typeCode() == NT_LIST) {
            int success = 0;
            int error = 0;
            foreach hash res in (rh.result) {
                if (res.success) {
                    success++;
                    continue;
                }
                log(LL_IMPORTANT, "failed creating Salesforce account - result:\n%N", res);
                error++;
            }
            if (error > 0) {
                log(LL_IMPORTANT, "cleaning up accounts");
                soap_delete_accounts(accNumbers);
                return -1;
            }
        }
        else {
            log(LL_IMPORTANT, "failed creating Salesforce accounts - result:\n%N", rh.result);
            soap_delete_accounts(accNumbers);
            return -1;
        }
    }
    log(LL_INFO, "created %d Salesforce accounts", accNumbers.size());

    # create static order data for workflow order
    hash sd = (
        "account_numbers": accNumbers,
        );

    # make order hash
    hash oh = (
        "staticdata": sd,
        );
    softint wfiid = create_order(Workflows.soap_acc_prov, NOTHING, oh);
    log(LL_INFO, "created %s wfiid %d", Workflows.soap_acc_prov, wfiid);
    return wfiid;
}
# END

# desc: start the salesforce.com REST API account provisioning demo
int sub start_rest_acc_prov_demo() {
    # create random accounts
    list accNumbers = rest_create_accounts();

    # create static order data for workflow order
    hash sd = (
        "account_numbers": accNumbers,
        );

    # make order hash
    hash oh = (
        "staticdata": sd,
        );
    softint wfiid = create_order(Workflows.rest_acc_prov, NOTHING, oh);
    log(LL_INFO, "created %s wfiid %d", Workflows.rest_acc_prov, wfiid);
    return wfiid;
}
# END

# name: gen_acc_details
# desc: generate account details for the salesforce.com account provisioning demo
# internal: true
const FirstNames = (
    "David",
    "Petr",
    "Jan",
    "Adam",
    "Miroslav",
    "Dalibor",
    "Viktor",
    "Vladislav",
    "Roman",
    "Oto",
);

const LastNames = (
    "Krátký",
    "Brázda",
    "Kubec",
    "Doubravský",
    "Brož",
    "Jeřábek",
    "Ježek",
    "Matalík",
    "Weisbauer",
    "Polák",
);

const Streets = (
    "Pražská",
    "Italská",
    "Anglická",
    "Náměstí Míru",
    "Zdechova",
    "Lacova",
    "Hlávkova",
    "Dvořákova",
    "Polední",
    "Táborská",
);

const Cities = (
    ("Praha", "11000"),
    ("Pardubice", "53002"),
    ("Brno", "62400"),
    ("Náchod", "54701"),
    ("Milovice", "28924"),
    ("Blansko", "67801"),
    ("Zlín", "76302"),
    ("Nymburk", "28802"),
    ("Teplice", "41501"),
    ("Rokycany", "33701"),
);

list sub gen_acc_details(int accCount) {
    hash accHash;
    list accounts = ();
    for (int i = 0; i < accCount; i++) {
        int city = rand() % 10;

        # find a random free account number
        int accNo;
        do {
            accNo = rand();
        } while (accHash{accNo});

        # create account hash
        hash accHash = {
            "Name": FirstNames[rand() % 10] + " " + LastNames[rand() % 10],
            "AccountNumber": accNo.toString(),
            "Description": "test account " + accNo,
            "BillingCountry": "Česká republika",
            "BillingCity": Cities[city][0],
            "BillingStreet": Streets[rand() % 10] + " " + string(rand() % 700),
            "BillingPostalCode": Cities[city][1],
            "Site": "acc_prov_demo",
        };
        push accounts, accHash;
    }

    return accounts;
}
# END

# name: acc_prov_demo_cleanup
# desc: delete accounts created by starting the acc_prov demo
sub acc_prov_demo_cleanup() {
    # get salesforce.com SOAP connection
    SalesforceSoapClient sc = get_user_connection("sfsoap-demo");

    softlist accountIds;

    # get IDs of created accounts
    {
        # create SOQL query string
        string ss = "select id from account where site = 'acc_prov_demo'";

        # execute query in Salesforce.com
        hash result = sc.query(("queryString": ss)).result;
        if (!result.done) {
            log(LL_INFO, "no matching accounts found; result: %N", result);
            return;
        }
        accountIds = map $1.Id, result.records;
        log(LL_DEBUG_1, "found %d matching account%s", accountIds.size(), accountIds.size() == 1 ? "" : "s");
        if (!accountIds)
            return;
    }

    # delete created accounts
    softlist rl = sc.delete(("ids": accountIds)).result;
    # log any errors
    map log(LL_INFO, "failed to delete account ID %y: %y", $1.id, $1.errors), rl, !$1.success;

    # get count of all successful deletions
    int deletedCount = foldl $1 + $2, (map 1, rl, $1.success);

    log(LL_DEBUG_1, "deleted %d account%s", deletedCount, deletedCount == 1 ? "" : "s");
}
# END

# desc: deletes the given accounts with the SOAP API
sub soap_delete_accounts(softlist accNumbers) {
    # get salesforce.com SOAP connection
    SalesforceSoapClient sc = get_user_connection("sfsoap-demo");

    softlist accountIds;

    # get IDs of created accounts
    {
        # create SOQL query string
        string args = foldl $1 + "," + $2, (map sprintf("'%s'", $1), accNumbers);
        string ss = sprintf("select id from account where accountnumber in (%s)", args);

        # execute query in Salesforce.com
        hash result = sc.query(("queryString": ss)).result;
        if (!result.done) {
            log(LL_INFO, "no matching accounts found from: %y, result: %N", accNumbers, result);
            return;
        }
        accountIds = map $1.Id, result.records;
        log(LL_DEBUG_1, "found %d/%d matching account%s", accountIds.size(), accNumbers.size(), accountIds.size() == 1 ? "" : "s");
        if (!accountIds)
            return;
    }

    # delete created accounts
    softlist rl = sc.delete(("ids": accountIds)).result;
    # log any errors
    map log(LL_INFO, "failed to delete account ID %y: %y", $1.id, $1.errors), rl, !$1.success;

    # get count of all successful deletions
    int deletedCount = foldl $1 + $2, (map 1, rl, $1.success);

    log(LL_DEBUG_1, "deleted %d/%d requested account%s", deletedCount, accNumbers.size(), accNumbers.size() == 1 ? "" : "s");
}
# END

# desc: create accounts with the REST API and return the account numbers created
list sub rest_create_accounts(int num = 30) {
    if (num <= 0)
        throw "INVALID-NUMBER", sprintf("number of accounts to generate must be positive; number given: %d", num);

    # get salesforce.com REST connection
    SalesforceRestClient rc = get_user_connection("sfrests-demo");

    # generate random account details
    list accounts = gen_acc_details(num);
    list accNumbers = map $1.AccountNumber, accounts;

    # add reference IDs for composite REST call
    accounts = map $1 + ("attributes": ("type": "Account", "referenceId": $#.toString())), accounts;

    # create accounts
    hash info;
    on_error log(LL_DEBUG_1, "info: %N", info);
    # maximum 200 accounts can be created; if any errors occur, an exception is thrown
    rc.post("composite/tree/Account", ("records": accounts), \info);

    log(LL_INFO, "created accounts: %y", accNumbers);
    return accNumbers;
}
# END
