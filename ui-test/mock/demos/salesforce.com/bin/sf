#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# here we add fallback paths to the QORE_MODULE_DIR search path,
# in case QORE_MODULE_DIR is not set properly for Qorus
%append-module-path /var/opt/qorus/qlib:$OMQ_DIR/qlib:/opt/qorus/qlib:$OMQ_DIR/user/modules

%requires QorusClientCore
%requires SalesforceSoapClient

%requires qore >= 0.8.12

%new-style
%require-types
%strict-args
%enable-all-warnings

const default_wsdl = "../wsdl/enterprise.wsdl";

const opts = (
    "verbose" : "verbose,v",
    "wsdl"    : "wsdl,w=s",
    "url"     : "url,u=s",
    "help"    : "help,h"
    );

sub usage() {
    printf("usage: %s [options]
 -u,--url=<ARG>    override target URL
 -v,--verbose      show more information
 -w,--wsdl=<ARG>   set URL for WSDL (default %y)
 -h,--help         this help text
", get_script_name(), default_wsdl);
    exit(1);
}

hash sub process_command_line() {
    GetOpt g(opts);
    hash o = g.parse3(\ARGV);
    if (o.help)
	usage();
    return o;
}

const Username = "david.nichols@qoretechnologies.com";
const Password = "TXbI2B,22bX6]1RXv/(uT`d&%eIbG9#AM`74ocCJ5h.DQ7mijy";
const Token = "lCuUrOliqDcP0ulGqOojrUmIb";

sub main() {
    hash o = process_command_line();

    if (!o.wsdl)
	o.wsdl = default_wsdl;

    hash opts = o.("wsdl",) + (
        "username": Username,
        "password": Password,
        "token": Token,
        "log": sub (string fmt) { printf("INFO: %s\n", vsprintf(fmt, argv)); },
        "dbglog": sub (string fmt) { printf("DEBUG: %s\n", vsprintf(fmt, argv)); },
        );

    SalesforceSoapClient sc(opts);

    sc.login();

    any ans = sc.getUserInfo();
    printf("ans: %N\n", ans);

    sc.logout();

    /*
    hash lh = (
        "username": Username,
        "password": Password + Token,
        );

    hash info;
    on_exit printf("info: %N\n", info);
    any ans = sc.call(\info, "login", lh, hdr);
    printf("ans: %N\n", ans);
    */
}

main();
