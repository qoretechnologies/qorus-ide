%new-style
%strict-args
%require-types
%enable-all-warnings

# aws-iot-demo-update-erp-request
string sub getInputData(hash<auto> staticdata, hash<auto> record) {
    return sprintf("%N", staticdata.input_data);
    /*
        AWS MessageId: %y detectorModelName: %y detector keyValue: %y detectorModelVersion: %y "
        "event timestamp: %y signature: %y", staticdata.input_data.MessageId,
        staticdata.input_data.Message.payload.detector.detectorModelName,
        staticdata.input_data.Message.payload.detector.keyValue,
        staticdata.input_data.Message.payload.detector.detectorModelVersion,
        staticdata.input_data.Timestamp, staticdata.input_data.Signature);
    */
}

string sub getEventInput(hash<auto> staticdata, hash<auto> record) {
    return sprintf("event input %s messageId %s",
        staticdata.input_data.Message.payload.eventTriggerDetails.inputName,
        staticdata.input_data.Message.payload.eventTriggerDetails.messageId,
    );
}
#

# aws-iot-demo-update-crm-request
string sub getOrderKeys(hash<auto> orderkeys, hash<auto> record) {
    return sprintf("%s AWS: %s", now_us().format("YYYY-MM-DD HH:mm:SS"), orderkeys.detector_id);
}
#

# aws-iot-demo-order-mapper
hash<auto> sub getMessageId(auto message_id, hash<auto> rec) {
    # ensures order is created once for unique values
    return {"message_id": message_id};
}

hash<string, string> sub getDetectorId(hash<auto> detector, hash<auto> rec) {
    return {"detector_id": sprintf("%s-%s", detector.detectorModelName, detector.keyValue)};
}

hash<auto> sub getRecordAsInputData(auto _, hash<auto> rec) {
    return {
        "input_data": rec,
    };
}
#