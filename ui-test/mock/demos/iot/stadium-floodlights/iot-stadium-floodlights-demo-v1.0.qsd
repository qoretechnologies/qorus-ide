# -*- mode: qore; indent-tabs-mode: nil -*-
# service: iot-stadium-floodlights-demo
# serviceversion: 1.0
# servicedesc: IoT example integration service; transaction-safe REST API for creating stadium light replacement orders
# serviceauthor: Qore Technologies, s.r.o.
# class-name: IotStadiumFloodlights
# define-group: iot-demo: IoT demo interfaces
# groups: iot-demo
# define-auth-label: auth=permissive
# autostart: true
# resource: iot_stadium_floodlights.yaml
# mappers: iot-stadium-floodlights-order-mapper:1.0
# ENDSERVICE

%new-style
%require-types
%strict-args
%enable-all-warnings

# import the Swagger module for Swagger 2.0 REST schema validation
%requires Swagger

#! the main REST handler class
class IotStadiumFloodlightsRestHandler inherits AbstractServiceRestHandler {
    constructor() : AbstractServiceRestHandler(
        ServiceApi::getConfigItemValue("root-uri"),
        False,
        new QorusParametrizedAuthenticator("auth"),
        IotStadiumFloodlightsRestHandler::getSwaggerSchema()) {

        addClass(new DefectRestClass());
    }

    *SwaggerSchema getSwaggerSchema() {
        *string schema = ServiceApi::getConfigItemValue("swagger-schema");
        if (!schema) {
            return;
        }
        return SwaggerLoader::fromString(ServiceApi::getResourceData(schema).toString(), False);
    }
} # IotStadiumFloodlightsRestHandler

#! the defect REST class
class DefectRestClass inherits AbstractRestClass {
    string name() {
        return "stadium-floodlights";
    }

    private hash<auto> startWorkflow(hash<auto> order_data) {
        try {
            softint workflow_instance_id = UserApi::createOrder(
                ServiceApi::getConfigItemValue("workflow-name"),
                NOTHING,
                order_data,
            );
            log(LL_INFO, "Created wf instance id: %d", workflow_instance_id);
            return RestHandler::makeResponse(201, "Received");
        } catch (hash<ExceptionInfo> ex) {
            if (ex.err == "DUPLICATE-ORDER-KEY") {
                log(LL_INFO, "Failed to create order: order with the same order key has already been created");
                return RestHandler::makeResponse(409, "Duplicate");
            }
            rethrow;
        }
    }

    hash<auto> post(hash<auto> cx, *hash<auto> ah) {
        log(LL_INFO, "POST received with args: %y", ah);
        # create the workflow order with the mapper
        Mapper mapper = ServiceApi::getMapper("iot-stadium-floodlights-order-mapper");
        hash<auto> order_data = mapper.mapData(ah);
        return startWorkflow(order_data);
    }
} # DefectRestClass

class IotStadiumFloodlights inherits QorusService {
    # name: init
    # desc: initializes the REST handler
    init() {
        IotStadiumFloodlightsRestHandler lh();
        # bind the handler to all global Qorus listeners
        bindHttp(lh);
    }

    private *hash<string, hash<ConfigItemInfo>> getConfigItemsImpl() {
        return {
            "root-uri": <ConfigItemInfo>{
                "type": "string",
                "description": "The root URI path for the REST service",
                "default_value": "iot",
                "strictly_local": True,
            },
            "swagger-schema": <ConfigItemInfo>{
                "type": "string",
                "description": "the name of the resource with the Swagger schema for this service",
                "default_value": "iot_stadium_floodlights.yaml",
                "strictly_local": True,
            },
            "workflow-name": <ConfigItemInfo>{
                "type": "string",
                "description": "the name of the workflow to trigger for replacement orders",
                "default_value": "IOT-STADIUM-LIGHT-REPLACEMENT-DEMO",
                "strictly_local": True,
            },
        };
    }
}
