# -*- mode: qore; indent-tabs-mode: nil -*-
# @file ErpSchema.qsm Qorus Integration System Salesforce.com account provisioning demo user schema module

/*  ErpSchema.qsm Copyright 2016 - 2020 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%requires qore >= 0.9.3

module ErpSchema {
    version = "1.0";
    desc = "Qorus ERP demo user schema module";
    author = "Qore Technologies <info@qoretechnologies.com>";
    url = "http://www.qoretechnologies.com";
}

# here we add fallback paths to the QORE_MODULE_DIR search path,
# in case QORE_MODULE_DIR is not set properly for Qorus
%append-module-path /var/opt/qorus/qlib:$OMQ_DIR/qlib:/opt/qorus/qlib

%requires Schema
%requires SqlUtil

%new-style
%strict-args
%require-types
%strict-args
%enable-all-warnings

# private namespace for private schema declarations
namespace Private {
    const GenericOptions = {
        "replace": True,
    };

    const IndexOptions = {
        "driver": {
            "oracle": {
                "compute_statistics": True,
            },
        },
    };

    const ColumnOptions = {
        "driver": {
            "oracle": {"character_semantics": True,},
        },
    };

    const T_GlRecord = {
        "columns": {
            "id": c_varchar(20, True, "PK ID field"),
            "ledger_id": c_number(15, True, "ledger ID"),
            "currency_code": c_varchar(3, True, "currency code"),
            "accounting_date": c_date(True, "accounting date"),
            "date_created": c_timestamp(True, "date created"),
            "journal_category": c_varchar(25, True, "journal category"),
            "journal_source": c_varchar(25, True, "journal source"),
            "journal_header_id": c_number(15, "header ID"),
            "journal_line_id": c_number(15, "line ID"),
            "currency_conversion_date": c_date("currency conversion date"),
            "currency_conversion_rate": c_number(15, "currency conversion rate"),
            "chart_of_accounts_id": c_number(15, "chart of accounts ID"),
            "gl_post_date": c_date(True, "date of GL posting"),
            "tax_code": c_varchar(15, "tax code for entry"),
            "invoice_date": c_date("original invoice date"),
            "invoice_identifier": c_varchar(20, "invoice identifier"),
            "invoice_amount": c_number(15, "invoice amount"),
            "set_of_books_id": c_number(15, "organization / tenant code"),
            "segment_1": c_varchar(25, "segment 1"),
            "segment_2": c_varchar(25, "segment 2"),
            "segment_3": c_varchar(25, "segment 3"),
            "segment_4": c_varchar(25, "segment 4"),
            "segment_5": c_varchar(25, "segment 5"),
            "segment_6": c_varchar(25, "segment 6"),
            "segment_7": c_varchar(25, "segment 7"),
            "segment_8": c_varchar(25, "segment 8"),
            "segment_9": c_varchar(25, "segment 9"),
            "segment_10": c_varchar(25, "segment 10"),
            "reference_1": c_varchar(240, "reference 1"),
            "reference_2": c_varchar(240, "reference 2"),
            "reference_3": c_varchar(240, "reference 3"),
            "reference_4": c_varchar(240, "reference 4"),
            "reference_5": c_varchar(240, "reference 5"),
            "reference_6": c_varchar(240, "reference 6"),
            "reference_7": c_varchar(240, "reference 7"),
            "reference_8": c_varchar(240, "reference 8"),
            "reference_9": c_varchar(240, "reference 9"),
            "reference_10": c_varchar(240, "reference 10"),
            "qorus_wfiid": c_int(True),
        },
        "primary_key": {"name": "pk_gl_record", "columns": ("id")},
        "indexes": {
            "sk_gl_record_q_wfiid": ("columns": ("qorus_wfiid")),
        },
    };

    const T_External_GlJournal = {
        "columns": {
            "jrn_id": c_varchar(20, True, "PK ID field"),
            "ledger_id": c_number(15, True, "ledger ID"),
            "currency_code": c_varchar(3, True, "currency code"),
            "effective_date": c_date(True, "effective date"),
            "creation_date": c_timestamp(True, "date created"),
            "category": c_varchar(25, True, "journal category"),
            "source": c_varchar(25, True, "journal source"),
            "batch_id": c_number(15, "batch ID"),
            "line_id": c_number(15, "line ID"),
            "fx_conversion_date": c_date("currency conversion date"),
            "fx_conversion_rate": c_number(15, "currency conversion rate"),
            "chart_of_accts_id": c_number(15, "chart of accounts ID"),
            "post_date": c_date(True, "date of GL posting"),

            "gl_tax_code": c_varchar(15, "tax code for entry"),
            "inv_date": c_date(True, "original invoice date"),
            "inv_identifier": c_varchar(20, "invoice identifier"),
            "inv_amount": c_number(15, "invoice amount"),
            "qorus_wfiid": c_int(True),
        },
        "primary_key": {"name": "pk_ext_gl_journal", "columns": ("jrn_id")},
        "indexes": {
            "sk_ext_gl_journal_batch": ("columns": ("batch_id")),
        },
    };

    const T_Orders = {
        "columns": {
            "order_id": c_varchar(50, True, "PK ID field"),
            "account": c_number(10, True, "account number"),
            #"cost": c_number(10, True, "total cost"),
            #"markup": c_number(10, True, "total selling price"),
            "currency_code": c_varchar(3, True, "currency code"),
            "creation_date": c_timestamp(True, "date created"),
            "ext_account_id": c_varchar(100, True, "external account ID"),
        },
        "primary_key": {"name": "pk_orders", "columns": ("order_id")},
    };

    const T_OrderItems = {
        "columns": {
            "order_id": c_varchar(50, True, "PK ID field"),
            "item_id": c_varchar(50, True, "PK item ID field"),
            "quantity": c_number(10, True, "number of items"),
            "cost": c_number(10, True, "total cost"),
            "markup": c_number(10, True, "total selling price"),
            "creation_date": c_timestamp(True, "date created"),
        },
        "primary_key": {"name": "pk_order_items", "columns": ("order_id", "item_id")},
        "foreign_constraints": {
            "fk_order_items_orders": {
                "columns": ("order_id", "item_id"),
                "table": "order_items",
            },
        },
    };

    const T_ErpOrderImport = {
        "columns": {
            "erp_order_id": c_varchar(50, True, "PK Order ID field"),
            "ext_account_id": c_number(10, True, "account number"),
            "net_cost": c_number(10, True, "total cost"),
            "total_markup": c_number(10, True, "total selling price"),
            "currency": c_varchar(3, True, "currency code"),
            "created": c_timestamp(True, "date created"),
        },
        "primary_key": {"name": "pk_erp_order_import", "columns": ("erp_order_id")},
    };

    const Tables = {
        "gl_record": T_GlRecord,
        "external_gl_journal": T_External_GlJournal,
        "orders": T_Orders,
        "order_items": T_OrderItems,
        "erp_order_import": T_ErpOrderImport,
    };

    const RD_Orders = (
        ("order_id", "account", "currency_code", "creation_date", "ext_account_id"),
        ("PO-2020.00001", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00002", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00003", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00004", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00005", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00006", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00007", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00008", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00009", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
        ("PO-2020.00010", 1, "EUR", now_us(), "0012o00002RyPQbAAN"),
    );

    const RD_OrderItems = (
        ("order_id", "item_id", "quantity", "cost", "markup", "creation_date"),
        ("PO-2020.00001", "EX-0001", 1, 25, 25, now_us()),
        ("PO-2020.00001", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00002", "EX-0001", 1, 75, 75, now_us()),
        ("PO-2020.00002", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00003", "EX-0001", 1, 40, 40, now_us()),
        ("PO-2020.00003", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00004", "EX-0001", 1, 22, 38, now_us()),
        ("PO-2020.00004", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00005", "EX-0001", 1, 35, 15, now_us()),
        ("PO-2020.00005", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00006", "EX-0001", 1, 55, 65, now_us()),
        ("PO-2020.00006", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00007", "EX-0001", 1, 80, 120, now_us()),
        ("PO-2020.00007", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00008", "EX-0001", 1, 20, 30, now_us()),
        ("PO-2020.00008", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00009", "EX-0001", 1, 15, 35, now_us()),
        ("PO-2020.00009", "EX-0002", 1, 35, 20, now_us()),
        ("PO-2020.00010", "EX-0001", 1, 45, 55, now_us()),
        ("PO-2020.00010", "EX-0002", 1, 35, 20, now_us()),
    );

    const RD_ErpOrderImport = (
    );

    const ReferenceData = (
        "orders": RD_Orders,
        "order_items": RD_OrderItems,
    );

    const Sequences = {
        "seq_gl_record": {},
        "seq_external_gl_journal": {},
        "seq_external_gl_journal_line": {},
    };
}

public namespace ErpSchema {
    public string sub get_datasource_name() {
        return "omquser";
    }

    public ErpSchema sub get_user_schema(AbstractDatasource ds, *string dts, *string its) {
        return new ErpSchema(ds, dts, its);
    }

    public class ErpSchema inherits AbstractSchema {
        public {
            const SchemaName = "ErpSchema";
            const SchemaVersion = "1.0";
        }

        constructor(AbstractDatasource ds, *string dts, *string its) :  AbstractSchema(ds, dts, its) {
        }

        private string getNameImpl() {
            return SchemaName;
        }

        private string getVersionImpl() {
            return SchemaVersion;
        }

        private *hash<auto> getTablesImpl() {
            return Tables;
        }

        private *hash<auto> getSequencesImpl() {
            return Sequences;
        }

        private *hash<auto> getIndexOptionsImpl() {
            return IndexOptions;
        }

        private *hash<auto> getGenericOptionsImpl() {
            return GenericOptions;
        }

        private *hash<auto> getColumnOptionsImpl() {
            return ColumnOptions;
        }

        #! returns a hash of reference data
        *hash<auto> getReferenceDataHashImpl() {
            return ReferenceData;
        }
    }
}
