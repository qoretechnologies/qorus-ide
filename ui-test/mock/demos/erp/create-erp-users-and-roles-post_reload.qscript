#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires QorusClientCore

QorusClient::init2();

const Config = {
    "jobs/erp-batch-fin-bank-statement-sftp-in": {
        "sftp-polling-connection-name": "sftp-erp-demo",
        "sftp-polling-mask": "*.txt",
        "create-workflow-name": "ERP-BATCH-FIN-BANK-STATEMENT-IN",
        "create-workflow-order-mapper": "erp-batch-fin-bank-statement-sftp-in",
    },
    "workflows/ERP-BATCH-FIN-GL-IN/stepinfo/ErpGlImport": {
        "automapper-mapper-name": "gl-import",
        "automapper-recovery-field": "qorus_wfiid",
        "automapper-recovery-value-template": "$local:workflow_instanceid",
    }
};

# create roles
QorusClient::createRole("erp", "superuser", "ERP demo role", "demo-erp");
QorusClient::createRole("erp-ro", "read-only", "ERP read-only demo role", "demo-erp");

# create users
QorusClient::createUser("erp", "erp", "erp", "ERP demo user");
QorusClient::createUser("erp-ro", "erp-ro", "erp-ro", "ERP read-only demo user");

# create erp connection
{
    hash<auto> options;
    if (is_file(ENV.HOME + "/.ssh/id_rsa.old")) {
        options.keyfile = ENV.HOME + "/.ssh/id_rsa.old";
    } else if (is_file(ENV.HOME + "/.ssh/id_rsa")) {
        options.keyfile = ENV.HOME + "/.ssh/id_rsa";
    }
    QorusClient::createUserConnection("sftp-erp-demo", "SFTP demo connection", "sftp://localhost/tmp", options);
}

# configure interfaces
QorusClient::configureInterfaces(Config);
